(()=>{var __webpack_modules__={264:(module,__unused_webpack_exports,__webpack_require__)=>{eval("module.exports = __webpack_require__(588);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjY0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanM/YWUzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCJyZWdlbmVyYXRvci1ydW50aW1lXCIpO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///264\n")},588:module=>{eval('/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  "use strict";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === "function" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || "@@iterator";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";\n  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, "");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there\'s no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don\'t have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: "normal", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: "throw", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = "suspendedStart";\n  var GenStateSuspendedYield = "suspendedYield";\n  var GenStateExecuting = "executing";\n  var GenStateCompleted = "completed";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don\'t natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    "GeneratorFunction"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    ["next", "throw", "return"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === "function" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === "GeneratorFunction"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, "GeneratorFunction");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, "__await")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === "throw") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === "object" &&\n            hasOwn.call(value, "__await")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke("next", value, resolve, reject);\n          }, function(err) {\n            invoke("throw", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke("throw", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error("Generator is already running");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === "throw") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === "next") {\n          // Setting context._sent for legacy support of Babel\'s\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === "throw") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === "return") {\n          context.abrupt("return", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === "normal") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === "throw") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = "throw";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === "throw") {\n        // Note: ["return"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator["return"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = "return";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === "throw") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // "return" to "throw", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = "throw";\n        context.arg = new TypeError(\n          "The iterator does not provide a \'throw\' method");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === "throw") {\n      context.method = "throw";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = "throw";\n      context.arg = new TypeError("iterator result is not an object");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was "throw" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was "next", forget context.arg since it has been\n      // "consumed" by the delegate iterator. If context.method was\n      // "return", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== "return") {\n        context.method = "next";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, "Generator");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers\' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn\'t happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return "[object Generator]";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = "normal";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: "root" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === "function") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel\'s\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = "next";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === "t" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === "throw") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = "throw";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = "next";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === "root") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle("end");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, "catchLoc");\n          var hasFinally = hasOwn.call(entry, "finallyLoc");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error("try statement without catch or finally");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, "finallyLoc") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === "break" ||\n           type === "continue") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = "next";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === "throw") {\n        throw record.arg;\n      }\n\n      if (record.type === "break" ||\n          record.type === "continue") {\n        this.next = record.arg;\n      } else if (record.type === "return") {\n        this.rval = this.arg = record.arg;\n        this.method = "return";\n        this.next = "end";\n      } else if (record.type === "normal" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    "catch": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === "throw") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error("illegal catch attempt");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === "next") {\n        // Deliberately forget the last sent value so that we don\'t\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you\'ve misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you\'re not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function("r", "regeneratorRuntime = r")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///588\n')},775:()=>{eval("var slides = document.querySelectorAll('.slide');\nvar dots = document.querySelectorAll('.dot');\nvar currentSlide = 1;\n\nvar showSlide = function showSlide(n) {\n  slides.forEach(function (slide) {\n    slide.style.display = 'none';\n  });\n  dots.forEach(function (dot) {\n    dot.classList.remove('active_dot');\n  });\n  slides[n - 1].style.display = 'flex';\n  dots[n - 1].classList.add('active_dot');\n};\n\nvar showPrevSlide = function showPrevSlide() {\n  if (currentSlide === 1) return;\n  currentSlide -= 1;\n  showSlide(currentSlide);\n};\n\nvar showNextSlide = function showNextSlide() {\n  if (currentSlide === slides.length) return;\n  currentSlide += 1;\n  showSlide(currentSlide);\n};\n\ndocument.querySelector('#prevBtn').addEventListener('click', showPrevSlide);\ndocument.querySelector('#nextBtn').addEventListener('click', showNextSlide);\ndots.forEach(function (dot, index) {\n  dot.addEventListener('click', function () {\n    currentSlide = index + 1;\n    showSlide(currentSlide);\n  });\n});\nshowSlide(currentSlide);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzc1LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vV2VhdGhlci1BcHAvLi9zcmMvY2Fyb3VzZWwuanM/NjRlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2xpZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNsaWRlJyk7XG52YXIgZG90cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kb3QnKTtcbnZhciBjdXJyZW50U2xpZGUgPSAxO1xuXG52YXIgc2hvd1NsaWRlID0gZnVuY3Rpb24gc2hvd1NsaWRlKG4pIHtcbiAgc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKHNsaWRlKSB7XG4gICAgc2xpZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfSk7XG4gIGRvdHMuZm9yRWFjaChmdW5jdGlvbiAoZG90KSB7XG4gICAgZG90LmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZV9kb3QnKTtcbiAgfSk7XG4gIHNsaWRlc1tuIC0gMV0uc3R5bGUuZGlzcGxheSA9ICdmbGV4JztcbiAgZG90c1tuIC0gMV0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlX2RvdCcpO1xufTtcblxudmFyIHNob3dQcmV2U2xpZGUgPSBmdW5jdGlvbiBzaG93UHJldlNsaWRlKCkge1xuICBpZiAoY3VycmVudFNsaWRlID09PSAxKSByZXR1cm47XG4gIGN1cnJlbnRTbGlkZSAtPSAxO1xuICBzaG93U2xpZGUoY3VycmVudFNsaWRlKTtcbn07XG5cbnZhciBzaG93TmV4dFNsaWRlID0gZnVuY3Rpb24gc2hvd05leHRTbGlkZSgpIHtcbiAgaWYgKGN1cnJlbnRTbGlkZSA9PT0gc2xpZGVzLmxlbmd0aCkgcmV0dXJuO1xuICBjdXJyZW50U2xpZGUgKz0gMTtcbiAgc2hvd1NsaWRlKGN1cnJlbnRTbGlkZSk7XG59O1xuXG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJldkJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd1ByZXZTbGlkZSk7XG5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV4dEJ0bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc2hvd05leHRTbGlkZSk7XG5kb3RzLmZvckVhY2goZnVuY3Rpb24gKGRvdCwgaW5kZXgpIHtcbiAgZG90LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIGN1cnJlbnRTbGlkZSA9IGluZGV4ICsgMTtcbiAgICBzaG93U2xpZGUoY3VycmVudFNsaWRlKTtcbiAgfSk7XG59KTtcbnNob3dTbGlkZShjdXJyZW50U2xpZGUpOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///775\n")},204:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval("\n;// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(264);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n;// CONCATENATED MODULE: ./src/isoCountries.js\nvar isoCountries = {\n  AF: 'Afghanistan',\n  AX: 'Aland Islands',\n  AL: 'Albania',\n  DZ: 'Algeria',\n  AS: 'American Samoa',\n  AD: 'Andorra',\n  AO: 'Angola',\n  AI: 'Anguilla',\n  AQ: 'Antarctica',\n  AG: 'Antigua And Barbuda',\n  AR: 'Argentina',\n  AM: 'Armenia',\n  AW: 'Aruba',\n  AU: 'Australia',\n  AT: 'Austria',\n  AZ: 'Azerbaijan',\n  BS: 'Bahamas',\n  BH: 'Bahrain',\n  BD: 'Bangladesh',\n  BB: 'Barbados',\n  BY: 'Belarus',\n  BE: 'Belgium',\n  BZ: 'Belize',\n  BJ: 'Benin',\n  BM: 'Bermuda',\n  BT: 'Bhutan',\n  BO: 'Bolivia',\n  BA: 'Bosnia And Herzegovina',\n  BW: 'Botswana',\n  BV: 'Bouvet Island',\n  BR: 'Brazil',\n  IO: 'British Indian Ocean Territory',\n  BN: 'Brunei',\n  BG: 'Bulgaria',\n  BF: 'Burkina Faso',\n  BI: 'Burundi',\n  KH: 'Cambodia',\n  CM: 'Cameroon',\n  CA: 'Canada',\n  CV: 'Cape Verde',\n  KY: 'Cayman Islands',\n  CF: 'Central African Republic',\n  TD: 'Chad',\n  CL: 'Chile',\n  CN: 'China',\n  CX: 'Christmas Island',\n  CC: 'Cocos Islands',\n  CO: 'Colombia',\n  KM: 'Comoros',\n  CG: 'Congo',\n  CD: 'Congo, Democratic Republic',\n  CK: 'Cook Islands',\n  CR: 'Costa Rica',\n  CI: 'Cote D\\'Ivoire',\n  HR: 'Croatia',\n  CU: 'Cuba',\n  CY: 'Cyprus',\n  CZ: 'Czech Republic',\n  DK: 'Denmark',\n  DJ: 'Djibouti',\n  DM: 'Dominica',\n  DO: 'Dominican Republic',\n  EC: 'Ecuador',\n  EG: 'Egypt',\n  SV: 'El Salvador',\n  GQ: 'Equatorial Guinea',\n  ER: 'Eritrea',\n  EE: 'Estonia',\n  ET: 'Ethiopia',\n  FK: 'Falkland Islands',\n  FO: 'Faroe Islands',\n  FJ: 'Fiji',\n  FI: 'Finland',\n  FR: 'France',\n  GF: 'French Guiana',\n  PF: 'French Polynesia',\n  TF: 'French Southern Territories',\n  GA: 'Gabon',\n  GM: 'Gambia',\n  GE: 'Georgia',\n  DE: 'Germany',\n  GH: 'Ghana',\n  GI: 'Gibraltar',\n  GR: 'Greece',\n  GL: 'Greenland',\n  GD: 'Grenada',\n  GP: 'Guadeloupe',\n  GU: 'Guam',\n  GT: 'Guatemala',\n  GG: 'Guernsey',\n  GN: 'Guinea',\n  GW: 'Guinea-Bissau',\n  GY: 'Guyana',\n  HT: 'Haiti',\n  HM: 'Heard Island & Mcdonald Islands',\n  VA: 'Vatican City',\n  HN: 'Honduras',\n  HK: 'Hong Kong',\n  HU: 'Hungary',\n  IS: 'Iceland',\n  IN: 'India',\n  ID: 'Indonesia',\n  IR: 'Iran',\n  IQ: 'Iraq',\n  IE: 'Ireland',\n  IM: 'Isle Of Man',\n  IL: 'Israel',\n  IT: 'Italy',\n  JM: 'Jamaica',\n  JP: 'Japan',\n  JE: 'Jersey',\n  JO: 'Jordan',\n  KZ: 'Kazakhstan',\n  KE: 'Kenya',\n  KI: 'Kiribati',\n  KR: 'Korea',\n  KW: 'Kuwait',\n  KG: 'Kyrgyzstan',\n  LA: 'Laos',\n  LV: 'Latvia',\n  LB: 'Lebanon',\n  LS: 'Lesotho',\n  LR: 'Liberia',\n  LY: 'Libya',\n  LI: 'Liechtenstein',\n  LT: 'Lithuania',\n  LU: 'Luxembourg',\n  MO: 'Macao',\n  MK: 'Macedonia',\n  MG: 'Madagascar',\n  MW: 'Malawi',\n  MY: 'Malaysia',\n  MV: 'Maldives',\n  ML: 'Mali',\n  MT: 'Malta',\n  MH: 'Marshall Islands',\n  MQ: 'Martinique',\n  MR: 'Mauritania',\n  MU: 'Mauritius',\n  YT: 'Mayotte',\n  MX: 'Mexico',\n  FM: 'Micronesia',\n  MD: 'Moldova',\n  MC: 'Monaco',\n  MN: 'Mongolia',\n  ME: 'Montenegro',\n  MS: 'Montserrat',\n  MA: 'Morocco',\n  MZ: 'Mozambique',\n  MM: 'Myanmar',\n  NA: 'Namibia',\n  NR: 'Nauru',\n  NP: 'Nepal',\n  NL: 'Netherlands',\n  AN: 'Netherlands Antilles',\n  NC: 'New Caledonia',\n  NZ: 'New Zealand',\n  NI: 'Nicaragua',\n  NE: 'Niger',\n  NG: 'Nigeria',\n  NU: 'Niue',\n  NF: 'Norfolk Island',\n  MP: 'Northern Mariana Islands',\n  NO: 'Norway',\n  OM: 'Oman',\n  PK: 'Pakistan',\n  PW: 'Palau',\n  PS: 'Palestinian Territory',\n  PA: 'Panama',\n  PG: 'Papua New Guinea',\n  PY: 'Paraguay',\n  PE: 'Peru',\n  PH: 'Philippines',\n  PN: 'Pitcairn',\n  PL: 'Poland',\n  PT: 'Portugal',\n  PR: 'Puerto Rico',\n  QA: 'Qatar',\n  RE: 'Reunion',\n  RO: 'Romania',\n  RU: 'Russia',\n  RW: 'Rwanda',\n  BL: 'Saint Barthelemy',\n  SH: 'Saint Helena',\n  KN: 'Saint Kitts And Nevis',\n  LC: 'Saint Lucia',\n  MF: 'Saint Martin',\n  PM: 'Saint Pierre And Miquelon',\n  VC: 'Saint Vincent And Grenadines',\n  WS: 'Samoa',\n  SM: 'San Marino',\n  ST: 'Sao Tome And Principe',\n  SA: 'Saudi Arabia',\n  SN: 'Senegal',\n  RS: 'Serbia',\n  SC: 'Seychelles',\n  SL: 'Sierra Leone',\n  SG: 'Singapore',\n  SK: 'Slovakia',\n  SI: 'Slovenia',\n  SB: 'Solomon Islands',\n  SO: 'Somalia',\n  ZA: 'South Africa',\n  GS: 'South Georgia And Sandwich Isl.',\n  ES: 'Spain',\n  LK: 'Sri Lanka',\n  SD: 'Sudan',\n  SR: 'Suriname',\n  SJ: 'Svalbard And Jan Mayen',\n  SZ: 'Swaziland',\n  SE: 'Sweden',\n  CH: 'Switzerland',\n  SY: 'Syria',\n  TW: 'Taiwan',\n  TJ: 'Tajikistan',\n  TZ: 'Tanzania',\n  TH: 'Thailand',\n  TL: 'Timor-Leste',\n  TG: 'Togo',\n  TK: 'Tokelau',\n  TO: 'Tonga',\n  TT: 'Trinidad And Tobago',\n  TN: 'Tunisia',\n  TR: 'Turkey',\n  TM: 'Turkmenistan',\n  TC: 'Turks And Caicos Islands',\n  TV: 'Tuvalu',\n  UG: 'Uganda',\n  UA: 'Ukraine',\n  AE: 'United Arab Emirates',\n  GB: 'United Kingdom',\n  US: 'United States',\n  UM: 'United States Outlying Islands',\n  UY: 'Uruguay',\n  UZ: 'Uzbekistan',\n  VU: 'Vanuatu',\n  VE: 'Venezuela',\n  VN: 'Viet Nam',\n  VG: 'Virgin Islands, British',\n  VI: 'Virgin Islands, U.S.',\n  WF: 'Wallis And Futuna',\n  EH: 'Western Sahara',\n  YE: 'Yemen',\n  ZM: 'Zambia',\n  ZW: 'Zimbabwe'\n};\n\nvar getCountryName = function getCountryName(isoCode) {\n  if (isoCountries.hasOwnProperty(isoCode)) {\n    return isoCountries[isoCode];\n  }\n\n  return isoCode;\n};\n\n/* harmony default export */ const src_isoCountries = (getCountryName);\n;// CONCATENATED MODULE: ./src/capitalize.js\nvar capitalize = function capitalize(str) {\n  var firstLetter = str.slice(0, 1);\n  return str.replace(firstLetter, firstLetter.toUpperCase());\n};\n\n/* harmony default export */ const src_capitalize = (capitalize);\n;// CONCATENATED MODULE: ./src/dateTimeUtilities.js\nvar days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nvar months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n\nvar getDayOfWeek = function getDayOfWeek(unixNum) {\n  var date = new Date(unixNum * 1000);\n  return days[date.getUTCDay()];\n};\n\nvar getHour = function getHour(unixNum, offset) {\n  var date = new Date((unixNum + offset) * 1000);\n  var hour = date.getUTCHours();\n  var amOrPm = hour < 12 ? 'am' : 'pm';\n  if (hour === 0) hour = 12;else if (hour > 12) hour -= 12;\n  return \"\".concat(hour).concat(amOrPm);\n};\n\nvar formatDateTime = function formatDateTime(unixNum, offset) {\n  var d = new Date((unixNum + offset) * 1000);\n  var day = days[d.getUTCDay()]; // Format date of month with st/nd/rd/th\n\n  var date = d.getUTCDate();\n\n  switch (date) {\n    case 1:\n    case 21:\n    case 31:\n      date += 'st';\n      break;\n\n    case 2:\n    case 22:\n      date += 'nd';\n      break;\n\n    case 3:\n    case 23:\n      date += 'rd';\n      break;\n\n    default:\n      date += 'th';\n  }\n\n  var month = months[d.getUTCMonth()];\n  var year = d.getFullYear(); // Calculate hour with AM/PM\n\n  var hour = d.getUTCHours();\n  var amOrPm = hour < 12 ? 'am' : 'pm';\n  if (hour === 0) hour = 12;else if (hour > 12) hour -= 12;\n  var minutes = d.getUTCMinutes().toString().padStart(2, '0');\n  return \"\".concat(day, \" \").concat(date, \" \").concat(month, \" \").concat(year, \", \").concat(hour, \":\").concat(minutes).concat(amOrPm);\n};\n\n\n;// CONCATENATED MODULE: ./src/formatData.js\n\n\n\n\nvar formatData = function formatData(data, name, countryCode, units) {\n  var current = {};\n  var daily = [];\n  var hourly = [];\n  var dateTime = formatDateTime(data.current.dt, data.timezone_offset); // Current weather\n\n  current.location = \"\".concat(name, \", \").concat(src_isoCountries(countryCode));\n  current.temp = data.current.temp.toFixed();\n  current.descriptionDetailed = src_capitalize(data.current.weather[0].description);\n  current.humidity = \"Humidity: \".concat(data.current.humidity, \"%\");\n\n  if (units === 'metric') {\n    current.units = '°C';\n    current.feelsLike = \"Feels Like: \".concat(data.current.feels_like.toFixed(), \"\\xB0C\");\n    current.windSpeed = \"Wind Speed: \".concat((data.current.wind_speed * 18 / 5).toFixed(), \"km/h\");\n  } else {\n    current.units = '°F';\n    current.feelsLike = \"Feels Like: \".concat(data.current.feels_like.toFixed(), \"\\xB0F\");\n    current.windSpeed = \"Wind Speed: \".concat(data.current.wind_speed.toFixed(), \"m/h\");\n  } // Daily weather\n\n\n  for (var i = 1; i <= 7; i++) {\n    var dailyForecast = {};\n    dailyForecast.day = getDayOfWeek(data.daily[i].dt);\n    dailyForecast.maxTemp = data.daily[i].temp.max.toFixed();\n    dailyForecast.minTemp = data.daily[i].temp.min.toFixed();\n    dailyForecast.description = data.daily[i].weather[0].description;\n    dailyForecast.units = units === 'metric' ? '°C' : '°F';\n    daily.push(dailyForecast);\n  } // Hourly weather\n\n\n  for (var _i = 1; _i <= 24; _i++) {\n    var hourlyForecast = {};\n    hourlyForecast.hour = getHour(data.hourly[_i].dt, data.timezone_offset);\n    hourlyForecast.temp = data.hourly[_i].temp.toFixed();\n    hourlyForecast.description = data.hourly[_i].weather[0].description;\n    hourlyForecast.units = units === 'metric' ? '°C' : '°F';\n    hourly.push(hourlyForecast);\n  }\n\n  return {\n    dateTime: dateTime,\n    current: current,\n    daily: daily,\n    hourly: hourly\n  };\n};\n\n/* harmony default export */ const src_formatData = (formatData);\n;// CONCATENATED MODULE: ./src/getWeatherData.js\n\n\n\n\nvar getCurrentWeather = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(city, units) {\n    var response, parsedResponse, lat, lon, name, countryCode, response2, parsedResponse2;\n    return regenerator_default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"https://api.openweathermap.org/data/2.5/weather?q=\".concat(city, \"&units=\").concat(units, \"&appid=c76cd77046b3b0e4cd4ff82d15c04e95\"));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            parsedResponse = _context.sent;\n            lat = parsedResponse.coord.lat;\n            lon = parsedResponse.coord.lon;\n            name = parsedResponse.name;\n            countryCode = parsedResponse.sys.country;\n            _context.next = 12;\n            return fetch(\"https://api.openweathermap.org/data/2.5/onecall?lat=\".concat(lat, \"&lon=\").concat(lon, \"&exclude=minutely,alerts&units=\").concat(units, \"&appid=c76cd77046b3b0e4cd4ff82d15c04e95\"));\n\n          case 12:\n            response2 = _context.sent;\n            _context.next = 15;\n            return response2.json();\n\n          case 15:\n            parsedResponse2 = _context.sent;\n            return _context.abrupt(\"return\", src_formatData(parsedResponse2, name, countryCode, units));\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCurrentWeather(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/* harmony default export */ const getWeatherData = (getCurrentWeather);\n;// CONCATENATED MODULE: ./src/renderWeatherData.js\nvar renderWeatherData = function renderWeatherData(data) {\n  // Local datetime in header\n  var dateTime = document.getElementById('date_time');\n  dateTime.textContent = data.dateTime; // Current weather\n\n  var location = document.getElementById('location');\n  var temp = document.getElementById('temp');\n  var units = document.getElementById('current_weather_units');\n  var description = document.getElementById('description');\n  var feelsLike = document.getElementById('feels_like');\n  var humidity = document.getElementById('humidity');\n  var windSpeed = document.getElementById('wind_speed');\n  location.textContent = data.current.location;\n  temp.textContent = data.current.temp;\n  units.textContent = data.current.units;\n  description.textContent = data.current.descriptionDetailed;\n  feelsLike.textContent = data.current.feelsLike;\n  humidity.textContent = data.current.humidity;\n  windSpeed.textContent = data.current.windSpeed; // Daily forecast\n\n  var dailyForecastDiv = document.querySelector('.daily_forecast'); // Clear current data\n\n  dailyForecastDiv.textContent = ''; // Add new data\n\n  data.daily.forEach(function (day) {\n    var dailyCard = document.createElement('div');\n    var weekday = document.createElement('p');\n    var maxTempContainer = document.createElement('div');\n    var maxTemp = document.createElement('span');\n    var maxTempUnits = document.createElement('span');\n    var minTempContainer = document.createElement('div');\n    var minTemp = document.createElement('span');\n    var minTempUnits = document.createElement('span');\n    var icon = document.createElement('i');\n    weekday.textContent = day.day;\n    weekday.classList.add('daily_day');\n    maxTemp.textContent = day.maxTemp;\n    maxTemp.classList.add('daily_max');\n    maxTempUnits.textContent = day.units;\n    maxTempUnits.classList.add('daily_max_units');\n    minTemp.textContent = day.minTemp;\n    minTemp.classList.add('daily_min');\n    minTempUnits.textContent = day.units;\n    minTempUnits.classList.add('daily_min_units');\n\n    switch (day.description) {\n      case 'clear sky':\n        icon.classList.add('fas');\n        icon.classList.add('fa-sun');\n        break;\n\n      case 'few clouds':\n      case 'broken clouds':\n      case 'scattered clouds':\n        icon.classList.add('fas');\n        icon.classList.add('fa-cloud-sun');\n        break;\n\n      case 'overcast clouds':\n        icon.classList.add('fas');\n        icon.classList.add('fa-cloud');\n        break;\n\n      case 'light rain':\n      case 'moderate rain':\n        icon.classList.add('fas');\n        icon.classList.add('fa-cloud-sun-rain');\n        break;\n\n      case 'heavy intensity rain':\n        icon.classList.add('fas');\n        icon.classList.add('fa-cloud-showers-heavy');\n        break;\n\n      default:\n        icon.classList.add('fas');\n        icon.classList.add('fa-sun');\n    }\n\n    maxTempContainer.appendChild(maxTemp);\n    maxTempContainer.appendChild(maxTempUnits);\n    minTempContainer.appendChild(minTemp);\n    minTempContainer.appendChild(minTempUnits);\n    dailyCard.appendChild(weekday);\n    dailyCard.appendChild(maxTempContainer);\n    dailyCard.appendChild(minTempContainer);\n    dailyCard.appendChild(icon);\n    dailyForecastDiv.appendChild(dailyCard);\n  }); // Hourly forecast\n\n  var slides = document.querySelectorAll('.slide'); // Clear current data\n\n  slides.forEach(function (slide) {\n    slide.textContent = '';\n  }); // Add new data\n\n  for (var i = 0; i < slides.length; i++) {\n    var offset = void 0;\n    if (i === 0) offset = 0;else if (i === 1) offset = 8;else offset = 16;\n\n    for (var j = 0 + offset; j < 8 + offset; j++) {\n      var hourlyInfoDiv = document.createElement('div');\n      var hour = document.createElement('p');\n      var tempContainer = document.createElement('div');\n\n      var _temp = document.createElement('span');\n\n      var _units = document.createElement('span');\n\n      var icon = document.createElement('i');\n      hour.textContent = data.hourly[j].hour;\n      hour.classList.add('hourly_hour');\n      _temp.textContent = data.hourly[j].temp;\n\n      _temp.classList.add('hourly_temp');\n\n      _units.textContent = data.hourly[j].units;\n\n      _units.classList.add('hourly_units');\n\n      switch (data.hourly[j].description) {\n        case 'clear sky':\n          icon.classList.add('fas');\n          icon.classList.add('fa-sun');\n          break;\n\n        case 'few clouds':\n        case 'broken clouds':\n        case 'scattered clouds':\n          icon.classList.add('fas');\n          icon.classList.add('fa-cloud-sun');\n          break;\n\n        case 'overcast clouds':\n          icon.classList.add('fas');\n          icon.classList.add('fa-cloud');\n          break;\n\n        case 'light rain':\n        case 'moderate rain':\n          icon.classList.add('fas');\n          icon.classList.add('fa-cloud-sun-rain');\n          break;\n\n        case 'heavy intensity rain':\n          icon.classList.add('fas');\n          icon.classList.add('fa-cloud-showers-heavy');\n          break;\n\n        default:\n          icon.classList.add('fas');\n          icon.classList.add('fa-sun');\n      }\n\n      tempContainer.appendChild(_temp);\n      tempContainer.appendChild(_units);\n      hourlyInfoDiv.appendChild(hour);\n      hourlyInfoDiv.appendChild(tempContainer);\n      hourlyInfoDiv.appendChild(icon);\n      slides[i].appendChild(hourlyInfoDiv);\n    }\n  }\n};\n\n/* harmony default export */ const src_renderWeatherData = (renderWeatherData);\n// EXTERNAL MODULE: ./src/carousel.js\nvar carousel = __webpack_require__(775);\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\n\n // to enable async/await\n// import '@babel/runtime';\n\nvar src_form = document.querySelector('form');\nvar input = document.querySelector('input');\nvar toggleSwitch = document.querySelector('input[type=\"checkbox\"]');\nvar dailyDropdown = document.querySelectorAll('.dropdown_btn')[0];\nvar dailyForecast = document.querySelector('.daily_forecast');\nvar hourlyDropdown = document.querySelectorAll('.dropdown_btn')[1];\nvar hourlyForecast = document.querySelector('.hourly_forecast');\nvar src_location = 'Rotorua';\n\nvar displayWeather = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regenerator_default().mark(function _callee(e) {\n    var metricOrImperial, weatherData;\n    return regenerator_default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            e.preventDefault(); // Check whether to use default city or input value\n\n            src_location = e.target.nodeName === 'FORM' ? input.value : src_location;\n            metricOrImperial = toggleSwitch.checked ? 'metric' : 'imperial';\n            input.value = '';\n            _context.next = 7;\n            return getWeatherData(src_location, metricOrImperial);\n\n          case 7:\n            weatherData = _context.sent;\n            src_renderWeatherData(weatherData);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 11]]);\n  }));\n\n  return function displayWeather(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar toggleDailyForecast = function toggleDailyForecast() {\n  // Ensure both forecasts aren't being\n  // displayed simultaneously\n  if (hourlyForecast.classList.contains('show_block')) toggleHourlyForecast();\n  dailyForecast.classList.toggle('show_flex');\n  dailyDropdown.classList.toggle('active_dropdown');\n};\n\nvar toggleHourlyForecast = function toggleHourlyForecast() {\n  // Ensure both forecasts aren't being\n  // displayed simultaneously\n  if (dailyForecast.classList.contains('show_flex')) toggleDailyForecast();\n  hourlyForecast.classList.toggle('show_block');\n  hourlyDropdown.classList.toggle('active_dropdown');\n};\n\nsrc_form.addEventListener('submit', displayWeather);\ntoggleSwitch.addEventListener('change', displayWeather);\ndailyDropdown.addEventListener('click', toggleDailyForecast);\nhourlyDropdown.addEventListener('click', toggleHourlyForecast);\nwindow.onload = displayWeather;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///204\n")}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var e=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](e,e.exports,__webpack_require__),e.exports}__webpack_require__.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return __webpack_require__.d(t,{a:t}),t},__webpack_require__.d=(n,t)=>{for(var e in t)__webpack_require__.o(t,e)&&!__webpack_require__.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},__webpack_require__.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t);var __webpack_exports__=__webpack_require__(204)})();